* Getting Familiar with the Docker Client

To check that everything is set-up, run the following:

#+BEGIN_EXAMPLE
 docker run hello-world
#+END_EXAMPLE

#+BEGIN_SRC sh

Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
d1725b59e92d: Pull complete
Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788
Status: Downloaded newer image for hello-world:latest
...
#+END_SRC


** Pulling an Image

Now that everything is set up, let's walk through how to run your first container. We will run an ubuntu container, and get familiar with some of the =docker= commands.

In your terminal, run the following:

#+BEGIN_EXAMPLE
 docker pull ubuntu
#+END_EXAMPLE

If you get a permission denied error, it may require you to run =sudo docker pull=. To avoid this in the future, try:

#+BEGIN_EXAMPLE
 sudo usermod -aG docker $USER
#+END_EXAMPLE

Then exit and restart your terminal.

The pull command fetches the latest ubuntu image from *Dockerhub*, a public container registry. To see which images are downloaded to your machine, run the following:

#+BEGIN_EXAMPLE
 docker images
#+END_EXAMPLE

Now that we have pulled our first image, it is time to run the container.

** Running a Container
In your terminal, run the following:
#+BEGIN_EXAMPLE
 docker run ubuntu echo "hello!"
#+END_EXAMPLE

What just happened?

1. When you call =run=, the Docker client calls the Docker daemon
2. The Docker daemon checks locally to see if the image is available, if it is not, it downloads it from Dockerhub 
3. If the image is present, the daemon creates the container and runs the command you specified in the containter
4. The output of the command is streamed to the client and you observe it

In our above example, the Docker client ran the command in the container and then exited out...in a matter of seconds! The speed with which containers can be created and commands run makes them very useful in many use cases. 

Note that the container exits after the command you pass to it is run. For it to not exit, you will need to run the container in *interactive* mode:
#+BEGIN_EXAMPLE
 docker run -it ubuntu 
#+END_EXAMPLE

This drops you in to the container. Try out your favourite commands (=ls -la=). You can exit the container by typing =exit=.

If you want to see what containers you have running, type:
#+BEGIN_EXAMPLE
 docker ps
#+END_EXAMPLE

Since you have exited out of all the containers, you will see nothing here. To see the containers that you have run, try:

#+BEGIN_EXAMPLE
 docker ps -a
#+END_EXAMPLE

This shows you a list of all the containers, you have run and also their Status. To get just the container IDs, you can use =docker ps -a -q=. The point to note here is that the image persists but the containers only exist for the time that you want to run them. You essentially have many machines with various configurations running on your machine or server as you need them. 

If at any time, you want to clean up images and containers, you can use:
#+BEGIN_EXAMPLE
 docker rm $(docker ps -a -q)
#+END_EXAMPLE

This clears all the containers on your machine. Similarly, to remove all images, use =docker rmi $(docker images -a -q)=.
